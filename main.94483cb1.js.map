{"version":3,"sources":["js/screen.js","js/defaults.js","js/main.js"],"names":["Screen","exports","default","color","_classCallCheck","canvas","ctx","frameCount","lastTimestamp","Date","now","deltaTime","isAnimating","effect","_createClass","key","value","createCanvas","updateCanvasSize","Effect","width","height","wrapText","animate","document","createElement","id","getContext","willReadFrequently","body","appendChild","window","innerWidth","innerHeight","canvasWidth","canvasHeight","textX","textY","_this","clearRect","fillStyle","fillRect","render","requestAnimationFrame","randomColor","concat","Math","floor","random","toString","timestamp","console","log","Particle","x","y","originX","originY","size","gap","dx","dy","vx","vy","force","angle","distance","friction","ease","context","mouse","radius","atan2","cos","sin","_this2","fontSize","lineHeight","maxTextWidth","particles","addEventListener","e","text","_this3","gradient","createLinearGradient","addColorStop","textAlign","textBaseline","lineWidth","strokeStyle","font","linesArray","words","split","lineCounter","line","i","length","testline","measureText","textHeight","forEach","el","index","fillText","strokeText","convertToParticles","pixels","getImageData","data","push","particle","update","draw","_default","bgColor","_screen","_interopRequireDefault","require","_defaults","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","instance","Constructor","TypeError","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","protoProps","staticProps","_defineProperty","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","tooDeeWorld","screen","config","initialize","run","attachEventListeners","event","changeBackgroundColor"],"mappings":";AAyNK,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,UAAA,MAAA,WAAA,EAAA,GAAA,EAAA,OAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,WAAA,EAAA,IAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,OAAA,aAAA,QAAA,IAAA,EAAA,CAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,WAAA,GAAA,WAAA,EAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,gDAAA,OAAA,WAAA,EAAA,OAAA,QAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzNL,IACqBA,EAAMC,QAAAC,QAAA,WACvB,SAAAF,EAAYG,GAAOC,EAAAJ,KAAAA,GACf,KAAKK,OAAS,KACd,KAAKC,IAAM,KACX,KAAKH,MAAQA,EACb,KAAKI,WAAa,EAClB,KAAKC,cAAgBC,KAAKC,MAC1B,KAAKC,UAAY,EACjB,KAAKC,aAAc,EACnB,KAAKC,OAAS,KA8EjB,OA5EAC,EAAAd,EAAA,CAAA,CAAAe,IAAA,aAAAC,MAED,WACI,KAAKC,eACL,KAAKC,mBACL,KAAKL,OAAS,IAAIM,EAAO,KAAKb,IAAK,KAAKD,OAAOe,MAAO,KAAKf,OAAOgB,QAClE,KAAKR,OAAOS,SAAS,cAErB,KAAKC,YACR,CAAAR,IAAA,eAAAC,MAED,WACI,KAAKX,OAASmB,SAASC,cAAc,UACrC,KAAKpB,OAAOqB,GAAK,SACjB,KAAKpB,IAAM,KAAKD,OAAOsB,WAAW,KAAM,CAAEC,oBAAoB,IAC9DJ,SAASK,KAAKC,YAAY,KAAKzB,UAElC,CAAAU,IAAA,mBAAAC,MAED,WACI,KAAKX,OAAOe,MAAQW,OAAOC,WAC3B,KAAK3B,OAAOgB,OAASU,OAAOE,YACxB,KAAKpB,SACL,KAAKA,OAAOqB,YAAc,KAAK7B,OAAOe,MACtC,KAAKP,OAAOsB,aAAe,KAAK9B,OAAOgB,OACvC,KAAKR,OAAOuB,MAAQ,KAAK/B,OAAOe,MAAQ,EACxC,KAAKP,OAAOwB,MAAQ,KAAKhC,OAAOgB,OAAS,KAEhD,CAAAN,IAAA,UAAAC,MAED,WAAU,IAAAsB,EAAA,KACF,KAAK1B,cAEL,KAAKN,IAAIiC,UAAU,EAAG,EAAG,KAAKlC,OAAOe,MAAO,KAAKf,OAAOgB,QACxD,KAAKf,IAAIkC,UAAY,KAAKrC,MAC1B,KAAKG,IAAImC,SAAS,EAAG,EAAG,KAAKpC,OAAOe,MAAO,KAAKf,OAAOgB,QAIvD,KAAKR,OAAO6B,SAQR,KAAK9B,aACL+B,sBAAsB,WAAA,OAAML,EAAKf,eAG5C,CAAAR,IAAA,wBAAAC,MAED,SAAsBb,GAEd,KAAKA,MADLA,GAGa,KAAKyC,gBAEzB,CAAA7B,IAAA,cAAAC,MAED,WACI,MAAA6B,IAAAA,OAAWC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,OAC5D,CAAAlC,IAAA,SAAAC,MAED,WACI,IAAMkC,EAAYzC,KAAKC,MACvB,KAAKC,WAAauC,EAAY,KAAK1C,cACnC,KAAKA,cAAgB0C,EACrB,KAAK3C,aAED,KAAKI,WAAa,MAClBwC,QAAQC,IAAGP,QAAAA,OAAS,KAAKtC,aACzB,KAAKA,WAAa,EAClB,KAAKI,UAAY,OAExBX,EAvFsB,GA0FrBqD,EAAQ,WACV,SAAAA,EAAYxC,EAAQyC,EAAGC,EAAGpD,GAAOC,EAAAiD,KAAAA,GAC7B,KAAKxC,OAASA,EACd,KAAKyC,EAAIR,KAAKE,SAAW,KAAKnC,OAAOqB,YACrC,KAAKqB,EAAI,KAAK1C,OAAOsB,aACrB,KAAKhC,MAAQA,EACb,KAAKqD,QAAUF,EACf,KAAKG,QAAUF,EACf,KAAKG,KAAO,KAAK7C,OAAO8C,IACxB,KAAKC,GAAK,EACV,KAAKC,GAAK,EACV,KAAKC,GAAK,EACV,KAAKC,GAAK,EACV,KAAKC,MAAQ,EACb,KAAKC,MAAQ,EACb,KAAKC,SAAW,EAChB,KAAKC,SAA2B,GAAhBrB,KAAKE,SAAiB,IACtC,KAAKoB,KAAuB,GAAhBtB,KAAKE,SAAiB,KAsBrC,OApBAlC,EAAAuC,EAAA,CAAA,CAAAtC,IAAA,OAAAC,MACD,WAEI,KAAKH,OAAOwD,QAAQ7B,UAAY,KAAKrC,MACrC,KAAKU,OAAOwD,QAAQ5B,SAAS,KAAKa,EAAG,KAAKC,EAAG,KAAKG,KAAM,KAAKA,QAChE,CAAA3C,IAAA,SAAAC,MACD,WACI,KAAK4C,GAAK,KAAK/C,OAAOyD,MAAMhB,EAAI,KAAKA,EACrC,KAAKO,GAAK,KAAKhD,OAAOyD,MAAMf,EAAI,KAAKA,EAErC,KAAKW,SAAW,KAAKN,GAAK,KAAKA,GAAK,KAAKC,GAAK,KAAKA,GACnD,KAAKG,OAAS,KAAKnD,OAAOyD,MAAMC,OAAS,KAAKL,SAC1C,KAAKA,SAAW,KAAKrD,OAAOyD,MAAMC,SAClC,KAAKN,MAAQnB,KAAK0B,MAAM,KAAKX,GAAI,KAAKD,IACtC,KAAKE,IAAM,KAAKE,MAAQlB,KAAK2B,IAAI,KAAKR,OACtC,KAAKF,IAAM,KAAKC,MAAQlB,KAAK4B,IAAI,KAAKT,QAE1C,KAAKX,IAAM,KAAKQ,IAAM,KAAKK,WAAa,KAAKX,QAAU,KAAKF,GAAK,KAAKc,KACtE,KAAKb,IAAM,KAAKO,IAAM,KAAKK,WAAa,KAAKV,QAAU,KAAKF,GAAK,KAAKa,SAEzEf,EAvCS,GA0CRlC,EAAM,WACR,SAAAA,EAAYkD,EAASnC,EAAaC,GAAc,IAAAwC,EAAA,KAAAvE,EAAAe,KAAAA,GAC5C,KAAKkD,QAAUA,EACf,KAAKnC,YAAcA,EACnB,KAAKC,aAAeA,EACpB,KAAKC,MAAQ,KAAKF,YAAc,EAChC,KAAKG,MAAQ,KAAKF,aAAe,EACjC,KAAKyC,SAAW,IAChB,KAAKC,WAA6B,GAAhB,KAAKD,SACvB,KAAKE,aAAkC,GAAnB,KAAK5C,YAEzB,KAAK6C,UAAY,GACjB,KAAKpB,IAAM,EACX,KAAKW,MAAQ,CACTC,OAAQ,KACRjB,EAAG,EACHC,EAAG,GAEPxB,OAAOiD,iBAAiB,YAAa,SAACC,GAClCN,EAAKL,MAAMhB,EAAI2B,EAAE3B,EACjBqB,EAAKL,MAAMf,EAAI0B,EAAE1B,IAgExB,OA9DAzC,EAAAK,EAAA,CAAA,CAAAJ,IAAA,WAAAC,MACD,SAASkE,GAAM,IAAAC,EAAA,KACLC,EAAW,KAAKf,QAAQgB,qBAAqB,EAAG,EAAG,KAAKnD,YAAa,KAAKC,cAChFiD,EAASE,aAAa,GAAK,OAC3BF,EAASE,aAAa,GAAK,WAC3BF,EAASE,aAAa,GAAK,QAC3B,KAAKjB,QAAQ7B,UAAY4C,EACzB,KAAKf,QAAQkB,UAAY,SACzB,KAAKlB,QAAQmB,aAAe,SAC5B,KAAKnB,QAAQoB,UAAY,EACzB,KAAKpB,QAAQqB,YAAc,QAC3B,KAAKrB,QAAQsB,KAAO,KAAKf,SAAW,eAKpC,IAJA,IAAIgB,EAAa,GACbC,EAAQX,EAAKY,MAAM,KACnBC,EAAc,EACdC,EAAO,GACFC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAAK,CACnC,IAAIE,EAAWH,EAAOH,EAAMI,GAAK,IAC7B,KAAK5B,QAAQ+B,YAAYD,GAAU/E,MAAQ,KAAK0D,cAChDkB,EAAOH,EAAMI,GAAK,IAClBF,KAGAC,EAAOG,EAEXP,EAAWG,GAAeC,EAE9B,IAAIK,EAAa,KAAKxB,WAAakB,EACnC,KAAK1D,MAAQ,KAAKF,aAAe,EAAIkE,EAAa,EAClDT,EAAWU,QAAQ,SAACC,EAAIC,GACpBrB,EAAKd,QAAQoC,SAASF,EAAIpB,EAAK/C,MAAO+C,EAAK9C,MAASmE,EAAQrB,EAAKN,YACjEM,EAAKd,QAAQqC,WAAWH,EAAIpB,EAAK/C,MAAO+C,EAAK9C,MAASmE,EAAQrB,EAAKN,cAGvE,KAAK8B,uBAER,CAAA5F,IAAA,qBAAAC,MACD,WACI,KAAK+D,UAAY,GACjB,IAAM6B,EAAS,KAAKvC,QAAQwC,aAAa,EAAG,EAAG,KAAK3E,YAAa,KAAKC,cAAc2E,KACpF,KAAKzC,QAAQ9B,UAAU,EAAG,EAAG,KAAKL,YAAa,KAAKC,cACpD,IAAK,IAAIoB,EAAI,EAAGA,EAAI,KAAKpB,aAAcoB,GAAK,KAAKI,IAC7C,IAAK,IAAIL,EAAI,EAAGA,EAAI,KAAKpB,YAAaoB,GAAK,KAAKK,IAAK,CACjD,IAAM6C,EAAqC,GAA5BjD,EAAI,KAAKrB,YAAcoB,GAEtC,GADcsD,EAAOJ,EAAQ,GACjB,EAAG,CACX,IAGMrG,EAAQ,OAHFyG,EAAOJ,GAGU,IAFfI,EAAOJ,EAAQ,GAEc,IAD9BI,EAAOJ,EAAQ,GAC4B,IACxD,KAAKzB,UAAUgC,KAAK,IAAI1D,EAAS,KAAMC,EAAGC,EAAGpD,QAI5D,CAAAY,IAAA,SAAAC,MACD,WAGI,KAAK+D,UAAUuB,QAAQ,SAAAU,GACnBA,EAASC,SACTD,EAASE,aAEhB/F,EApFO;;AChIX,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EALD,IAAAgG,EAAAlH,QAAAC,QAEe,CACXkH,QAAS;;ACiE8D,aAnE3E,IAAAC,EAAAC,EAAAC,QAAA,gBACAC,EAAAF,EAAAC,QAAA,kBAAmC,SAAAD,EAAAG,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAvH,CAAAA,QAAAuH,GAAA,SAAAE,EAAAC,GAAAD,OAAAA,EAAAE,mBAAAA,QAAAA,iBAAAA,OAAAC,SAAAF,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAC,mBAAAA,QAAAD,EAAAG,cAAAF,QAAAD,IAAAC,OAAAG,UAAAJ,gBAAAA,IAAAA,GAAA,SAAAxH,EAAA6H,EAAAC,GAAAD,KAAAA,aAAAC,GAAAC,MAAAA,IAAAA,UAAA,qCAAA,SAAAC,EAAAC,EAAAC,GAAArC,IAAAA,IAAAA,EAAAA,EAAAA,EAAAqC,EAAApC,OAAAD,IAAAsC,CAAAA,IAAAA,EAAAD,EAAArC,GAAAsC,EAAAC,WAAAD,EAAAC,aAAAD,EAAAA,EAAAE,cAAAF,EAAAA,UAAAA,IAAAA,EAAAG,UAAAC,GAAAA,OAAAC,eAAAP,EAAAQ,EAAAN,EAAAxH,KAAAwH,IAAA,SAAAzH,EAAAoH,EAAAY,EAAAC,GAAAb,OAAAY,GAAAV,EAAAF,EAAAF,UAAAc,GAAAC,GAAAX,EAAAF,EAAAa,GAAAJ,OAAAC,eAAAV,EAAAQ,YAAAA,CAAAA,UAAAR,IAAAA,EAAA,SAAAc,EAAAvB,EAAA1G,EAAAC,GAAAyG,OAAA1G,EAAA8H,EAAA9H,MAAA0G,EAAAkB,OAAAC,eAAAnB,EAAA1G,EAAAC,CAAAA,MAAAA,EAAAwH,YAAAC,EAAAA,cAAAC,EAAAA,UAAAjB,IAAAA,EAAA1G,GAAAC,EAAAyG,EAAA,SAAAoB,EAAAI,GAAAlI,IAAAA,EAAAmI,EAAAD,EAAAtB,UAAAA,MAAA5G,WAAA4G,EAAA5G,GAAAA,EAAAoI,OAAApI,GAAA,SAAAmI,EAAAE,EAAAC,GAAA1B,GAAAyB,WAAAzB,EAAAyB,IAAAA,OAAAA,EAAAA,OAAAA,EAAAE,IAAAA,EAAAF,EAAAvB,OAAA0B,aAAAD,QAAAE,IAAAF,EAAAG,CAAAA,IAAAA,EAAAH,EAAAI,KAAAN,EAAAC,GAAA1B,WAAAA,GAAA8B,WAAA9B,EAAA8B,GAAAA,OAAAA,EAAAtB,MAAAA,IAAAA,UAAAkB,gDAAAA,OAAAF,WAAAE,EAAAF,OAAAQ,QAAAP,GAFnC,IAIMQ,EAAW,WACb,SAAAA,IAAcxJ,EAAAwJ,KAAAA,GAQdZ,EACM,KAAA,MAAA,cARF,KAAKa,OAAS,IAAI7J,EAAM,QAAC8J,EAAM,QAAC1C,SAChC,KAAKyC,OAAOE,aACZ,KAAKC,MACL,KAAKC,uBAwDR,OAtDAnJ,EAAA8I,EAAA,CAAA,CAAA7I,IAAA,uBAAAC,MAUD,WAAuB,IAAAsB,EAAA,KACnBP,OAAOiD,iBAAiB,SAAU,WAC9B1C,EAAKuH,OAAO3I,mBACZoB,EAAKuH,OAAOhJ,OAAOS,SAAS,gBAyBhCE,SAASwD,iBAAiB,UAAW,SAACkF,GAClC,OAAQA,EAAMnJ,KACV,IAAK,IACDoC,QAAQC,IAAI,WACZd,EAAKuH,OAAOjJ,aAAe0B,EAAKuH,OAAOjJ,YACnC0B,EAAKuH,OAAOjJ,aACZ0B,EAAKuH,OAAOtI,UAEhB,MACJ,QACIe,EAAKuH,OAAOM,+BAM3BP,EA7DY,GAgEjBpI,SAASwD,iBAAiB,mBAAoB,WAAQ,IAAI4E","file":"main.94483cb1.js","sourceRoot":"../build","sourcesContent":["//screen.js\nexport default class Screen {\n    constructor(color) {\n        this.canvas = null;\n        this.ctx = null;\n        this.color = color;\n        this.frameCount = 0;\n        this.lastTimestamp = Date.now();\n        this.deltaTime = 0;\n        this.isAnimating = true;\n        this.effect = null;\n\n    }\n\n    initialize() {\n        this.createCanvas();\n        this.updateCanvasSize();\n        this.effect = new Effect(this.ctx, this.canvas.width, this.canvas.height);\n        this.effect.wrapText('AndyPants!');\n\n        this.animate();\n    }\n\n    createCanvas() {\n        this.canvas = document.createElement('canvas');\n        this.canvas.id = 'screen';\n        this.ctx = this.canvas.getContext('2d', { willReadFrequently: true });\n        document.body.appendChild(this.canvas);\n\n    }\n\n    updateCanvasSize() {\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n        if (this.effect) {\n            this.effect.canvasWidth = this.canvas.width;\n            this.effect.canvasHeight = this.canvas.height;\n            this.effect.textX = this.canvas.width / 2;\n            this.effect.textY = this.canvas.height / 2;\n        }\n    }\n\n    animate() {\n        if (this.isAnimating) {\n\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            this.ctx.fillStyle = this.color;\n            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n\n\n            this.effect.render();\n\n\n\n\n\n\n            // this.logFPS();\n            if (this.isAnimating) {\n                requestAnimationFrame(() => this.animate());\n            }\n        }\n    }\n\n    changeBackgroundColor(color) {\n        if (color) {\n            this.color = color;\n        } else {\n            this.color = this.randomColor();\n        }\n    }\n\n    randomColor() {\n        return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n    }\n\n    logFPS() {\n        const timestamp = Date.now();\n        this.deltaTime += timestamp - this.lastTimestamp;\n        this.lastTimestamp = timestamp;\n        this.frameCount++;\n\n        if (this.deltaTime >= 1000) {\n            console.log(`FPS: ${this.frameCount}`);\n            this.frameCount = 0;\n            this.deltaTime = 0;\n        }\n    }\n}\n\nclass Particle {\n    constructor(effect, x, y, color) {\n        this.effect = effect;\n        this.x = Math.random() * this.effect.canvasWidth;\n        this.y = this.effect.canvasHeight;\n        this.color = color;\n        this.originX = x;\n        this.originY = y;\n        this.size = this.effect.gap;\n        this.dx = 0;\n        this.dy = 0;\n        this.vx = 0;\n        this.vy = 0;\n        this.force = 0;\n        this.angle = 0;\n        this.distance = 0;\n        this.friction = Math.random() * 0.6 + 0.15;\n        this.ease = Math.random() * 0.1 + 0.005;\n\n    }\n    draw() {\n        // if( this.effect.context.fillStyle != this.color )\n        this.effect.context.fillStyle = this.color;\n        this.effect.context.fillRect(this.x, this.y, this.size, this.size);\n    }\n    update() {\n        this.dx = this.effect.mouse.x - this.x;\n        this.dy = this.effect.mouse.y - this.y;\n        // this.distance = Math.sqrt(this.dx * this.dx + this.dy * this.dy);  \n        this.distance = this.dx * this.dx + this.dy * this.dy; //performance enhancement\n        this.force = -this.effect.mouse.radius / this.distance;\n        if (this.distance < this.effect.mouse.radius) {\n            this.angle = Math.atan2(this.dy, this.dx);\n            this.vx += this.force * Math.cos(this.angle);\n            this.vy += this.force * Math.sin(this.angle);\n        }\n        this.x += (this.vx *= this.friction) + (this.originX - this.x) * this.ease;\n        this.y += (this.vx *= this.friction) + (this.originY - this.y) * this.ease;\n\n    }\n}\n\nclass Effect {\n    constructor(context, canvasWidth, canvasHeight) {\n        this.context = context;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.textX = this.canvasWidth / 2;\n        this.textY = this.canvasHeight / 2;\n        this.fontSize = 150;\n        this.lineHeight = this.fontSize * 0.8;\n        this.maxTextWidth = this.canvasWidth * 0.8;\n\n        this.particles = [];\n        this.gap = 5;\n        this.mouse = {\n            radius: 15000,\n            x: 0,\n            y: 0\n        }\n        window.addEventListener('mousemove', (e) => {\n            this.mouse.x = e.x;\n            this.mouse.y = e.y;\n        })\n    }\n    wrapText(text) {\n        const gradient = this.context.createLinearGradient(0, 0, this.canvasWidth, this.canvasHeight);\n        gradient.addColorStop(0.3, 'red');\n        gradient.addColorStop(0.5, 'fuchsia');\n        gradient.addColorStop(0.7, 'blue');\n        this.context.fillStyle = gradient;\n        this.context.textAlign = 'center';\n        this.context.textBaseline = 'middle';\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = 'white';\n        this.context.font = this.fontSize + 'px Helvetica';\n        let linesArray = [];\n        let words = text.split(' ');\n        let lineCounter = 0;\n        let line = '';\n        for (let i = 0; i < words.length; i++) {\n            let testline = line + words[i] + ' ';\n            if (this.context.measureText(testline).width > this.maxTextWidth) {\n                line = words[i] + ' ';\n                lineCounter++;\n            }\n            else {\n                line = testline;\n            }\n            linesArray[lineCounter] = line;\n        }\n        let textHeight = this.lineHeight * lineCounter;\n        this.textY = this.canvasHeight / 2 - textHeight / 2;\n        linesArray.forEach((el, index) => {\n            this.context.fillText(el, this.textX, this.textY + (index * this.lineHeight));\n            this.context.strokeText(el, this.textX, this.textY + (index * this.lineHeight));\n\n        });\n        this.convertToParticles();\n\n    }\n    convertToParticles() {\n        this.particles = [];\n        const pixels = this.context.getImageData(0, 0, this.canvasWidth, this.canvasHeight).data;\n        this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n        for (let y = 0; y < this.canvasHeight; y += this.gap) {\n            for (let x = 0; x < this.canvasWidth; x += this.gap) {\n                const index = (y * this.canvasWidth + x) * 4;\n                const alpha = pixels[index + 3];\n                if (alpha > 0) {\n                    const red = pixels[index];\n                    const green = pixels[index + 1];\n                    const blue = pixels[index + 2];\n                    const color = 'rgb(' + red + ',' + green + ',' + blue + ')';\n                    this.particles.push(new Particle(this, x, y, color));\n                }\n            }\n        }\n    }\n    render() {\n        // this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n        this.particles.forEach(particle => {\n            particle.update();\n            particle.draw();\n        })\n    }\n}","// config.js\n\nexport default {\n    bgColor: '#808080', // Default background color\n\n};\n","//main.js\nimport Screen from './screen.js';\nimport config from './defaults.js';\n\nclass tooDeeWorld {\n    constructor() {\n        this.screen = new Screen(config.bgColor);\n        this.screen.initialize();\n        this.run();\n        this.attachEventListeners();\n\n    }\n\n    //run = async () => { //i feel like this is going to be right but isn't for now\n    run = () => {\n        //i don't know anymore...\n\n    }\n\n\n\n    attachEventListeners() {\n        window.addEventListener('resize', () => {\n            this.screen.updateCanvasSize();\n            this.screen.effect.wrapText('AndyPants!');\n        });\n\n        //document.addEventListener('keydown', () => { this.changeBackgroundColor() });\n\n        // // Handle the click event to draw a square\n        // document.addEventListener('click', (event) => {\n        //     const x = event.clientX;\n        //     const y = event.clientY;\n        //     const size = Math.floor(Math.random() * (50 + 1));; // Adjust the size as needed\n        //     const color = 'green'; // Adjust the color as needed\n        //     const square = new Square(x, y, size, this.randomColor());\n        //     this.squares.push(square);\n        // });\n\n        // // Handle the touchstart event to draw a circle\n        // document.addEventListener('touchstart', (event) => {\n        //     const x = event.touches[0].clientX;\n        //     const y = event.touches[0].clientY;\n        //     const color = 'green';\n        //     const size = 50; // Adjust the size as needed\n        //     const circle = new Circle(x, y, size, this.randomColor());\n        //     this.circles.push(circle);\n        // });\n\n        document.addEventListener('keydown', (event) => {\n            switch (event.key) {\n                case ' ':\n                    console.log(\"toggle?\")\n                    this.screen.isAnimating = !this.screen.isAnimating; // Toggle animation state\n                    if (this.screen.isAnimating) {\n                        this.screen.animate(); // Resume animation\n                    }\n                    break;\n                default:\n                    this.screen.changeBackgroundColor();\n                    break;\n\n            }\n        });\n\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => { new tooDeeWorld(); });\n"]}